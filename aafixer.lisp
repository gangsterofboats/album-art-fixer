(require "asdf")
(require "cl-ppcre")

(setf input-path (third sb-ext:*posix-argv*))
(setf output-path (fifth sb-ext:*posix-argv*))
(setf last-char-ip (subseq input-path (- (length input-path) 1)))
(setf last-char-op (subseq output-path (- (length output-path) 1)))
(if (string/= last-char-ip "/")
    (setf input-path (concatenate 'string input-path "/")))
(if (string/= last-char-op "/")
    (setf output-path (concatenate 'string output-path "/")))
(setf not-square (list))
(setf not-big-enough (list))
(setf aart-files (uiop/filesystem:directory-files input-path "**/AlbumArt.jpg"))
(loop for art in aart-files do
     (setf size (uiop:run-program `("magick" "identify" ,(format nil "~a" art)) :output :string))
     (setf size (ppcre:scan-to-strings "\\d+x\\d+" size))
     (setf dims (ppcre:split "x" size))
     (if (string/= (nth 0 dims) (nth 1 dims))
         (setf not-square (append not-square (list art))))
     (if (or (< (parse-integer (nth 0 dims))) (< (parse-integer (nth 1 dims))))
         (setf not-big-enough (append not-big-enough (list art)))))
(with-open-file (fbe (concatenate 'string output-path "notbig.txt") :direction :output :if-exists :supersede)
  (dolist (item not-big-enough)
    (format fbe "~a~%" item)))
(with-open-file (fns (concatenate 'string output-path "notsquare.txt") :direction :output :if-exists :supersede)
  (dolist (item not-square)
    (format fns "~a~%" item)))
